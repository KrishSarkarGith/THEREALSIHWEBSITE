# Generated by Django 5.2.5 on 2025-08-30 16:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Career',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('education_requirements', models.JSONField(default=list)),
                ('experience_levels', models.JSONField(default=list)),
                ('salary_range', models.JSONField(default=dict)),
                ('job_outlook', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'careers',
            },
        ),
        migrations.CreateModel(
            name='College',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('location', models.CharField(max_length=200)),
                ('country', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('university', 'University'), ('college', 'College'), ('institute', 'Institute'), ('polytechnic', 'Polytechnic')], max_length=50)),
                ('ranking', models.IntegerField(blank=True, null=True)),
                ('acceptance_rate', models.FloatField(blank=True, null=True)),
                ('tuition_fees', models.JSONField(default=dict)),
                ('programs', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'colleges',
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('industry', models.CharField(max_length=100)),
                ('growth_potential', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], max_length=20)),
                ('salary_range', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'domains',
            },
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('academic', 'Academic'), ('creative', 'Creative'), ('sports', 'Sports'), ('technology', 'Technology'), ('business', 'Business'), ('arts', 'Arts'), ('science', 'Science'), ('social', 'Social')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'interests',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('technical', 'Technical'), ('soft', 'Soft Skills'), ('domain', 'Domain Knowledge'), ('tool', 'Tools & Technologies')], max_length=50)),
                ('proficiency_levels', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'skills',
            },
        ),
        migrations.CreateModel(
            name='Trait',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('personality', 'Personality'), ('cognitive', 'Cognitive'), ('social', 'Social'), ('leadership', 'Leadership'), ('technical', 'Technical'), ('creative', 'Creative'), ('analytical', 'Analytical')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'traits',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('education_level', models.CharField(choices=[('high_school', 'High School'), ('bachelor', "Bachelor's Degree"), ('master', "Master's Degree"), ('phd', 'PhD'), ('diploma', 'Diploma'), ('certification', 'Certification'), ('other', 'Other')], max_length=100)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('preferences', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('assessment_type', models.CharField(choices=[('personality', 'Personality'), ('interest', 'Interest'), ('aptitude', 'Aptitude'), ('comprehensive', 'Comprehensive')], max_length=50)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='in_progress', max_length=20)),
                ('overall_score', models.FloatField(blank=True, null=True)),
                ('summary', models.TextField(blank=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'assessments',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('duration', models.CharField(max_length=50)),
                ('level', models.CharField(choices=[('certificate', 'Certificate'), ('diploma', 'Diploma'), ('bachelor', 'Bachelor'), ('master', 'Master'), ('phd', 'PhD')], max_length=50)),
                ('fees', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_online', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('career_paths', models.ManyToManyField(related_name='courses', to='career_advisor.career')),
                ('college', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='career_advisor.college')),
                ('skills_covered', models.ManyToManyField(related_name='courses', to='career_advisor.skill')),
            ],
            options={
                'db_table': 'courses',
            },
        ),
        migrations.AddField(
            model_name='career',
            name='domain',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='careers', to='career_advisor.domain'),
        ),
        migrations.CreateModel(
            name='Roadmap',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('target_audience', models.CharField(max_length=100)),
                ('duration_months', models.IntegerField()),
                ('steps', models.JSONField(default=list)),
                ('outcomes', models.JSONField(default=list)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('career', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roadmaps', to='career_advisor.career')),
                ('prerequisites', models.ManyToManyField(related_name='roadmap_prerequisites', to='career_advisor.skill')),
            ],
            options={
                'db_table': 'roadmaps',
            },
        ),
        migrations.AddField(
            model_name='career',
            name='required_skills',
            field=models.ManyToManyField(related_name='careers', to='career_advisor.skill'),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('question_type', models.CharField(choices=[('personality', 'Personality'), ('interest', 'Interest'), ('aptitude', 'Aptitude'), ('skill', 'Skill'), ('value', 'Value')], max_length=50)),
                ('weight', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5.0)])),
                ('options', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='career_advisor.trait')),
            ],
            options={
                'db_table': 'questions',
            },
        ),
        migrations.AddField(
            model_name='career',
            name='preferred_traits',
            field=models.ManyToManyField(related_name='careers', to='career_advisor.trait'),
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('raw_response', models.TextField()),
                ('weighted_score', models.FloatField()),
                ('response_time', models.IntegerField(blank=True, help_text='Response time in seconds', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='career_advisor.assessment')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='career_advisor.question')),
            ],
            options={
                'db_table': 'responses',
                'unique_together': {('assessment', 'question')},
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('match_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('reasoning', models.TextField()),
                ('confidence_level', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='career_advisor.assessment')),
                ('career', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='career_advisor.career')),
                ('suggested_courses', models.ManyToManyField(related_name='recommendations', to='career_advisor.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
                ('suggested_roadmaps', models.ManyToManyField(related_name='recommendations', to='career_advisor.roadmap')),
                ('skill_gaps', models.ManyToManyField(related_name='recommendation_gaps', to='career_advisor.skill')),
            ],
            options={
                'db_table': 'recommendations',
                'unique_together': {('user', 'assessment', 'career')},
            },
        ),
        migrations.CreateModel(
            name='CareerSkillMap',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('importance_level', models.CharField(choices=[('critical', 'Critical'), ('important', 'Important'), ('preferred', 'Preferred'), ('optional', 'Optional')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('career', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_mappings', to='career_advisor.career')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='career_mappings', to='career_advisor.skill')),
            ],
            options={
                'db_table': 'career_skill_maps',
                'unique_together': {('career', 'skill')},
            },
        ),
        migrations.CreateModel(
            name='AssessmentTrait',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('percentile', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trait_scores', to='career_advisor.assessment')),
                ('trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_scores', to='career_advisor.trait')),
            ],
            options={
                'db_table': 'assessment_traits',
                'unique_together': {('assessment', 'trait')},
            },
        ),
        migrations.CreateModel(
            name='UserInterest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('intensity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('interest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='career_advisor.interest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_interests',
                'unique_together': {('user', 'interest')},
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20)),
                ('years_of_experience', models.FloatField(default=0.0)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='career_advisor.skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_skills',
                'unique_together': {('user', 'skill')},
            },
        ),
    ]
